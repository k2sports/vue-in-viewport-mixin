// Generated by CoffeeScript 1.12.5

/*
Directive version of the main mixin
 */

(function() {
  var check, win;

  win = require('window-event-mediator');

  check = require('./check');

  module.exports = {
    inViewportActive: true,
    inViewportOnce: true,
    inViewportClass: 'in-viewport',
    inViewportOffsetTop: 0,
    inViewportOffsetBottom: 0,
    params: ['inViewportActive', 'inViewportOnce', 'inViewportClass', 'inViewportOffsetTop', 'inViewportOffsetBottom'],
    bind: function() {
      var i, key, len, ref;
      ref = ['inViewportActive', 'inViewportOnce', 'inViewportClass', 'inViewportOffsetTop', 'inViewportOffsetBottom'];
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        if (this.params[key] == null) {
          this.params[key] = this[key];
        }
      }
      this.boundOnInViewportScroll = (function(_this) {
        return function() {
          return _this.onInViewportScroll();
        };
      })(this);
      if (this.params.inViewportActive) {
        return this.addHandlers();
      } else {
        return this.vm.$watch('inViewportActive', (function(_this) {
          return function(ready) {
            if (ready) {
              return _this.addHandlers();
            }
          };
        })(this), {
          immediate: true
        });
      }
    },
    unbind: function() {
      return this.removeHandlers();
    },
    addHandlers: function() {
      if (this.handlersAdded) {
        return;
      }
      this.handlersAdded = true;
      win.on('scroll', this.boundOnInViewportScroll);
      win.on('resize', this.boundOnInViewportScroll);
      return this.onInViewportScroll();
    },
    removeHandlers: function() {
      if (!this.handlersAdded) {
        return;
      }
      this.handlersAdded = false;
      win.off('scroll', this.boundOnInViewportScroll);
      return win.off('resize', this.boundOnInViewportScroll);
    },
    onInViewportScroll: function() {
      var above, below, visible;
      visible = this.isInViewport();
      above = this.isAboveViewport();
      below = this.isBelowViewport();
      if (this.params.inViewportOnce && visible) {
        this.removeHandlers();
      }
      return $(this.el).toggleClass(this.params.inViewportClass, visible);
    },
    isInViewport: function() {
      return check(this.el, {
        offsetTop: this.params.inViewportOffsetTop,
        offsetBottom: this.params.inViewportOffsetBottom
      }).inViewport;
    },
    isAboveViewport: function() {
      return check(this.el, {
        offsetTop: this.params.inViewportOffsetTop,
        offsetBottom: this.params.inViewportOffsetBottom
      }).aboveViewport;
    },
    isBelowViewport: function() {
      return check(this.el, {
        offsetTop: this.params.inViewportOffsetTop,
        offsetBottom: this.params.inViewportOffsetBottom
      }).belowViewport;
    }
  };

}).call(this);
